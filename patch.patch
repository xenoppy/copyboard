diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/build/gyp_base.mozbuild /home/loongson/thunderbird/build/gyp_base.mozbuild
--- /home/loongson/thunderbird-ori/thunderbird/build/gyp_base.mozbuild	2023-07-08 01:23:36.605697076 +0800
+++ b/b/b/b/build/gyp_base.mozbuild	2023-07-06 13:17:44.191199542 +0800
@@ -32,6 +32,7 @@ arches = {
     'x86_64': 'x64',
     'x86': 'ia32',
     'aarch64': 'arm64',
+    'loongarch64': 'loongarch64',
     'ppc64': 'ppc64le' if CONFIG['TARGET_ENDIANNESS'] == 'little' else 'ppc64',
 }
 
diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/build/moz.configure/init.configure /home/loongson/thunderbird/build/moz.configure/init.configure
--- /home/loongson/thunderbird-ori/thunderbird/build/moz.configure/init.configure	2023-07-08 01:23:36.613697331 +0800
+++ b/b/b/b/build/moz.configure/init.configure	2023-07-06 13:17:44.191199542 +0800
@@ -530,6 +530,9 @@ def split_triplet(triplet, allow_msvc=Fa
     elif cpu.startswith("loongarch64"):
         canonical_cpu = "loongarch64"
         endianness = "little"
+    elif cpu.startswith('loongarch64'):
+        canonical_cpu = 'loongarch64'
+        endianness = 'little'
     elif cpu == "sh4":
         canonical_cpu = "sh4"
         endianness = "little"
         
diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/Cargo.lock /home/loongson/thunderbird/Cargo.lock
--- /home/loongson/thunderbird-ori/thunderbird/Cargo.lock	2023-07-08 01:23:34.485629268 +0800
+++ /home/loongson/thunderbird/Cargo.lock	2023-07-05 14:26:53.961466016 +0800
@@ -317,7 +317,6 @@ dependencies = [
 name = "authenticator"
 version = "0.3.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "08cee7a0952628fde958e149507c2bb321ab4fccfafd225da0b20adc956ef88a"
 dependencies = [
  "bitflags",
  "core-foundation",
@@ -1120,7 +1119,6 @@ dependencies = [
 name = "cty"
 version = "0.2.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b365fabc795046672053e29c954733ec3b05e4be654ab130fe8f1f94d7051f35"
 
 [[package]]
 name = "cubeb"
@@ -3593,7 +3591,6 @@ checksum = "e4a24736216ec316047a1fc4252e
 name = "nix"
 version = "0.15.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3b2e0b4f3320ed72aaedb9a5ac838690a8047c7b275da22711fddff4f8a14229"
 dependencies = [
  "bitflags",
  "cc",
  
diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/third_party/rust/cty/src/lib.rs /home/loongson/thunderbird/third_party/rust/cty/src/lib.rs
--- /home/loongson/thunderbird-ori/thunderbird/third_party/rust/cty/src/lib.rs	2023-07-08 01:24:53.199981319 +0800
+++ b/b/b/b/third_party/rust/cty/src/lib.rs	2023-07-05 00:52:16.526567551 +0800
@@ -24,6 +24,7 @@ pub use pwd::*;
           target_arch = "powerpc",
           target_arch = "powerpc64",
           target_arch = "s390x",
+          target_arch = "loongarch64" ,
           target_arch = "riscv32",
           target_arch = "riscv64"))]
 mod ad {
diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/comm/third_party/botan/src/build-data/arch/loongarch64.txt /home/loongson/thunderbird/comm/third_party/botan/src/build-data/arch/loongarch64.txt
--- /home/loongson/thunderbird-ori/thunderbird/comm/third_party/botan/src/build-data/arch/loongarch64.txt	1970-01-01 08:00:00.000000000 +0800
+++ b/b/b/b/comm/third_party/botan/src/build-data/arch/loongarch64.txt	2023-07-05 00:02:42.562307108 +0800
@@ -0,0 +1,3 @@
+family loongarch
+endian little
+wordsize 64

diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/third_party/rust/authenticator/.cargo-checksum.json /home/loongson/thunderbird/third_party/rust/authenticator/.cargo-checksum.json
--- /home/loongson/thunderbird-ori/thunderbird/third_party/rust/authenticator/.cargo-checksum.json	2023-07-08 01:24:52.859971856 +0800
+++ b/b/b/b/third_party/rust/authenticator/.cargo-checksum.json	2023-07-05 13:44:29.208812423 +0800
@@ -1 +1 @@
-{"files":{"Cargo.lock":"abaed4932db2206e5fdb7cb73a8c100f6c91fc84a8f33e8763677040ae8ea9bf","Cargo.toml":"9b56d5495021e7cd8ab7e019cceda45e906a2a3629a68e9019c6e5cb682dbc43","Cross.toml":"8d132da818d48492aa9f4b78a348f0df3adfae45d988d42ebd6be8a5adadb6c3","LICENSE":"e866c8f5864d4cacfe403820e722e9dc03fe3c7565efa5e4dad9051d827bb92a","README.md":"c87d9c7cc44f1dd4ef861a3a9f8cd2eb68aedd3814768871f5fb63c2070806cd","build.rs":"bc308b771ae9741d775370e3efe45e9cca166fd1d0335f4214b00497042ccc55","examples/main.rs":"d899646fa396776d0bb66efb86099ffb195566ecdb6fc4c1765ae3d54d696a8d","rustfmt.toml":"ceb6615363d6fff16426eb56f5727f98a7f7ed459ba9af735b1d8b672e2c3b9b","src/authenticatorservice.rs":"9fc5bcdd1e4f32e58ae920f96f40619a870b0a1b8d05db650803b2402a37fbf9","src/capi.rs":"1d3145ce81293bec697b0d385357fb1b0b495b0c356e2da5e6f15d028d328c70","src/consts.rs":"3dbcdfced6241822062e1aa2e6c8628af5f539ea18ee41edab51a3d33ebb77c6","src/errors.rs":"de89e57435ed1f9ff10f1f2d997a5b29d61cb215551e0ab40861a08ca52d1447","src/freebsd/device.rs":"595df4b3f66b90dd73f8df67e1a2ba9a20c0b5fd893afbadbec564aa34f89981","src/freebsd/mod.rs":"42dcb57fbeb00140003a8ad39acac9b547062b8f281a3fa5deb5f92a6169dde6","src/freebsd/monitor.rs":"c10b154632fbedc3dca27197f7fc890c3d50ac1744b927e9f1e44a9e8a13506e","src/freebsd/transaction.rs":"bfb92dcf2edeb5d620a019907fff1025eb36ef322055e78649a3055b074fa851","src/freebsd/uhid.rs":"84f564d337637c1cd107ccc536b8fce2230628e144e4031e8db4d7163c9c0cb3","src/hidproto.rs":"362fc8e24b94ba431aad5ee0002f5a3364badd937c706c0ae119a5a7a2abc7c2","src/lib.rs":"12f62285a3d33347f95236b71341462a76ea1ded67651fc96ba25d7bd1dd8298","src/linux/device.rs":"d27c5f877cf96b97668579ac5db0f2685f7c969e7a5d0ddc68043eb16bfcddb8","src/linux/hidraw.rs":"ed55caa40fd518d67bb67d5af08f9adcab34f89e0ca591142d45b87f172926dd","src/linux/hidwrapper.h":"72785db3a9b27ea72b6cf13a958fee032af54304522d002f56322473978a20f9","src/linux/hidwrapper.rs":"4be65676cf3220929700bf4906938dcbd1538ba53d40c60b08f9ba8890c910f6","src/linux/ioctl_aarch64le.rs":"2d8b265cd39a9f46816f83d5a5df0701c13eb842bc609325bad42ce50add3bf0","src/linux/ioctl_armle.rs":"2d8b265cd39a9f46816f83d5a5df0701c13eb842bc609325bad42ce50add3bf0","src/linux/ioctl_mips64le.rs":"fbda309934ad8bda689cd4fb5c0ca696fe26dedb493fe9d5a5322c3047d474fd","src/linux/ioctl_mipsbe.rs":"fbda309934ad8bda689cd4fb5c0ca696fe26dedb493fe9d5a5322c3047d474fd","src/linux/ioctl_mipsle.rs":"fbda309934ad8bda689cd4fb5c0ca696fe26dedb493fe9d5a5322c3047d474fd","src/linux/ioctl_powerpc64be.rs":"fbda309934ad8bda689cd4fb5c0ca696fe26dedb493fe9d5a5322c3047d474fd","src/linux/ioctl_powerpc64le.rs":"fbda309934ad8bda689cd4fb5c0ca696fe26dedb493fe9d5a5322c3047d474fd","src/linux/ioctl_powerpcbe.rs":"fbda309934ad8bda689cd4fb5c0ca696fe26dedb493fe9d5a5322c3047d474fd","src/linux/ioctl_s390xbe.rs":"2d8b265cd39a9f46816f83d5a5df0701c13eb842bc609325bad42ce50add3bf0","src/linux/ioctl_x86.rs":"2d8b265cd39a9f46816f83d5a5df0701c13eb842bc609325bad42ce50add3bf0","src/linux/ioctl_x86_64.rs":"2d8b265cd39a9f46816f83d5a5df0701c13eb842bc609325bad42ce50add3bf0","src/linux/mod.rs":"446e435126d2a58f167f648dd95cba28e8ac9c17f1f799e1eaeab80ea800fc57","src/linux/monitor.rs":"9ef4e22fdcf005dd5201b42595d958ea462998c75dbfc68c8a403e7be64328e4","src/linux/transaction.rs":"bfb92dcf2edeb5d620a019907fff1025eb36ef322055e78649a3055b074fa851","src/macos/device.rs":"cc97b773254a89526164987e4b8e4181910fc3decb32acf51ca86c596ad0147b","src/macos/iokit.rs":"7dc4e7bbf8e42e2fcde0cee8e48d14d6234a5a910bd5d3c4e966d8ba6b73992f","src/macos/mod.rs":"333e561554fc901d4f6092f6e4c85823e2b0c4ff31c9188d0e6d542b71a0a07c","src/macos/monitor.rs":"d059861b4739c9272fa305b6dd91ebeb08530bd0e70a013dd999565d6f06fb30","src/macos/transaction.rs":"935b4bc79b0e50a984604a1ada96a7ef723cc283b7d33ca07f3150b1752b99f7","src/manager.rs":"5a4cdc26b9fde20e1a3dc2389f15d38d9153109bfee5119c092fbfdbd19bad8d","src/netbsd/device.rs":"3a99a989a7a8411ddb9893c371644076662a3b488d40b436601c27fd92fdf159","src/netbsd/fd.rs":"260f1a8ae04896c0eb35ab0914e11ca9291e7317a086c94328aa219c0e1fc1d2","src/netbsd/mod.rs":"b1c52aa29537330cebe67427062d6c94871cab2a9b0c04b2305d686f07e88fd5","src/netbsd/monitor.rs":"dfd68e026c52271b68a3a9263837c793127e9d54ed19b748ef6d13ab4c44e09a","src/netbsd/transaction.rs":"9334a832a57e717a981c13c364ed4ee80ce9798460fc6c8954723d2fcf20585a","src/netbsd/uhid.rs":"154a4587767f151e3f846cc0b79f615d5137de67afed84f19176f27ac9097908","src/openbsd/device.rs":"ae1c8de90bb515a12d571372a30322fadb5122bc69ab71caf154452caa8a644f","src/openbsd/mod.rs":"514274d414042ff84b3667a41a736e78581e22fda87ccc97c2bc05617e381a30","src/openbsd/monitor.rs":"5eb071dd3719ea305eac21ec20596463f63790f8cd1f908a59e3f9cb0b71b5ad","src/openbsd/transaction.rs":"2380c9430f4c95a1fefaaab729d8ece0d149674708d705a71dd5d2513d9e1a4c","src/statecallback.rs":"6b16f97176db1ae3fc3851fe8394e4ffc324bc6fe59313845ac3a88132fd52f1","src/statemachine.rs":"27e2655411ebc1077c200f0aa2ba429ca656fc7dd6f90e08b51492b59ec72e61","src/stub/device.rs":"5e378147e113e20160a45d395b717bd3deecb327247c24b6735035f7d50861b7","src/stub/mod.rs":"6a7fec504a52d403b0241b18cd8b95088a31807571f4c0a67e4055afc74f4453","src/stub/transaction.rs":"4a2ccb2d72070a8bc61442254e063278c68212d5565ba5bfe4d47cacebf5bd1c","src/u2fhid-capi.h":"10f2658df774bb7f7f197a9f217b9e20d67b232b60a554e8ee3c3f71480ea1f6","src/u2fprotocol.rs":"72120773a948ffd667b5976c26ae27a4327769d97b0eef7a3b1e6b2b4bbb46a9","src/u2ftypes.rs":"a02d2c29790c5edfec9af320b1d4bcb93be0bbf02b881fa5aa403cfb687a25ae","src/util.rs":"d2042b2db4864f2b1192606c3251709361de7fb7521e1519190ef26a77de8e64","src/virtualdevices/mod.rs":"2c7df7691d5c150757304241351612aed4260d65b70ab0f483edbc1a5cfb5674","src/virtualdevices/software_u2f.rs":"1b86b94c6eadec6a22dffdd2b003c5324247c6412eeddb28a6094feb1c523f8e","src/virtualdevices/webdriver/mod.rs":"4a36e6dfa9f45f941d863b4039bfbcfa8eaca660bd6ed78aeb1a2962db64be5a","src/virtualdevices/webdriver/testtoken.rs":"7146e02f1a5dad2c8827dd11c12ee408c0e42a0706ac65f139998feffd42570f","src/virtualdevices/webdriver/virtualmanager.rs":"a55a28995c81b5affb0a74207b6dd556d272086a554676df2e675fe991d730a9","src/virtualdevices/webdriver/web_api.rs":"27206ee09c83fe25b34cad62174e42383defd8c8a5e917d30691412aacdae08f","src/windows/device.rs":"bc3f9587677c185a624c0aae7537baf9f780484ab8337929db994800b9064ba9","src/windows/mod.rs":"218e7f2fe91ecb390c12bba5a5ffdad2c1f0b22861c937f4d386262e5b3dd617","src/windows/monitor.rs":"3804dc67de46a1a6b7925c83e0df95d94ddfa1aa53a88fc845f4ff26aede57f8","src/windows/transaction.rs":"ee639f28b2dcdb7e00c922d8762fe6aa33def8c7aaeb46ec93e3a772407a9d86","src/windows/winapi.rs":"de92afb17df26216161138f18eb3b9162f3fb2cdeb74aa78173afe804ba02e00","testing/cross/powerpc64le-unknown-linux-gnu.Dockerfile":"d7463ff4376e3e0ca3fed879fab4aa975c4c0a3e7924c5b88aef9381a5d013de","testing/cross/x86_64-unknown-linux-gnu.Dockerfile":"11c79c04b07a171b0c9b63ef75fa75f33263ce76e3c1eda0879a3e723ebd0c24","testing/run_cross.sh":"cc2a7e0359f210eba2e7121f81eb8ab0125cea6e0d0f2698177b0fe2ad0c33d8","webdriver-tools/requirements.txt":"8236aa3dedad886f213c9b778fec80b037212d30e640b458984110211d546005","webdriver-tools/webdriver-driver.py":"82327c26ba271d1689acc87b612ab8436cb5475f0a3c0dba7baa06e7f6f5e19c"},"package":"08cee7a0952628fde958e149507c2bb321ab4fccfafd225da0b20adc956ef88a"}
\ 文件尾没有换行符
+{"files":{}}

diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/third_party/rust/nix/.cargo-checksum.json /home/loongson/thunderbird/third_party/rust/nix/.cargo-checksum.json
--- /home/loongson/thunderbird-ori/thunderbird/third_party/rust/nix/.cargo-checksum.json	2023-07-08 01:25:00.728189397 +0800
+++ b/b/b/b/third_party/rust/nix/.cargo-checksum.json	2023-07-05 14:26:21.977854634 +0800
@@ -1 +1 @@
-{"files":{"CHANGELOG.md":"91af9fd5f2d9cdb9c8bb750e24b625742e95a6c74bcff419f3de70eb26578281","CONTRIBUTING.md":"a9101e3d1487170d691d5f062ff49a433c167582ac8984dd41a744be92652f74","CONVENTIONS.md":"e150ce43c1d188c392c1a3bf7f2e08e3cf84906705c7bef43f319037d29ea385","Cargo.toml":"af0cc0ae7ff4bf6c2e5b35fe062f54fe2d619f70ba67795f4f43a981420b5de0","LICENSE":"66e3ee1fa7f909ad3c612d556f2a0cdabcd809ad6e66f3b0605015ac64841b70","README.md":"80d71b9eaac7bf7f0d307372592ed1467f994291e6fad816a44f3c70e2887d0f","build.rs":"14c9c678c33f5894509da47f77d6a326b14aecb4190ce87a24cce98687ca63b2","src/dir.rs":"21e330cbe6594274335b94d9e9b6059f1fa8e53d2e5b5c697058c52ec6b3c5ff","src/errno.rs":"a009ccf18b45c0a4c9319c65b0dc5bc322d9ad43cfe462ec4661559f44162451","src/errno_dragonfly.c":"a857e47b114acb85fddcb252a610ab5734d225c26b7bedd7c35d7789d46c8526","src/fcntl.rs":"6ae2f7f01dd2568b82a4e57f86e02b1d63eec6c26111c5adb2ca5d78a2a99fe7","src/features.rs":"22ff626ff8287a07dd55bcfc63c9f518c19c56144e15f9b6f9e3bbdcda51c2a8","src/ifaddrs.rs":"9a93de176edcca4613e668b8ccc2c3e3b6b711aa2d8d94ccb0ba08694d1ef35f","src/kmod.rs":"4d8a695d3d761f351a39d654303a1bd168e74295b7d142b918737e355b24f34d","src/lib.rs":"fdd8049a79ffb92384c72f0a6b0bab717001ddfa9b01f2b33413c83f424f2ac8","src/macros.rs":"aec27fa0fd98900913fada926c9a4581cd28f2640e3a7b5480707f923c9200f8","src/mount.rs":"cdf5db8409017483132db9d7493b5d6cc96df5560d0fa5ad8f385aff72db10ca","src/mqueue.rs":"82af42b31381af73e7966f845d1ed93957f0b9976bf2da524b178fad15b2b08d","src/net/if_.rs":"f7e02076fcf3cadf3fdf141884c9bd2c468a7047ba60bc490f0057df802b53ce","src/net/mod.rs":"577f70170e53d4a6de1abb70bf8f1031ec3e65c0e63ef5fcf05c907125e7ac17","src/poll.rs":"7305e250066cd1a7318cd239ed3db787937ee98426fe9289cf00fa874d76b6c7","src/pty.rs":"6b965b586579933af47d4efef4c82c391b927037eaa08d8c83fc974ef17fc7c8","src/sched.rs":"f9b214fa60006b5450ffb3589a55ec59c3694bd49597c65c38ac813fcd96c7dd","src/sys/aio.rs":"a1ba629258b3ce1268e5fe8e5b41dce3581f77d415dc5e2455c1f82f26dd3085","src/sys/epoll.rs":"f0b539e0645569657f2142db91a38c94ebe1925f44852d64c61c818758dbbf0b","src/sys/event.rs":"ef8bc02a08d9ce7924c87f8f891fa051587b195a36913712fe85237a2fe0685b","src/sys/eventfd.rs":"08008cf3dc64c2216847c02c0dd8d7189cf08edbaafe35ba2c57c053fde09ef4","src/sys/inotify.rs":"687c8417d737939aa93f805d6003afc4f84f50828b1bd9429ef5d00bef0e0955","src/sys/ioctl/bsd.rs":"56ca6ecf5f7cfb566f4f3ba589fcc778f747a517dd45e13780981922e6215344","src/sys/ioctl/linux.rs":"6cfbdff4dbfa1a3782acdedebe89ffa9f000fdfc4ab68cb46f52890ebc1c6f2d","src/sys/ioctl/mod.rs":"20bc3cf1fcbbc7c31e4d507baa4e576a793ea42fb33618d2e7afeda730c4324f","src/sys/memfd.rs":"11cd93c867fdbdbc9588cecb94268691de42b2ef2a38fe33525be7c7f60c85d5","src/sys/mman.rs":"f77d28611a7ff3bf62784a3c4f26d7d79969395b1d9bbc6ff15e734f52dc404f","src/sys/mod.rs":"f39a08c72e37638c7cecfb9c087e0a41e2b69409aa545b0ef7bbd59c0a063ee2","src/sys/pthread.rs":"cfa9ccd6f3b86c0c3fe012773c9c82a7813b298c2f20f8ab629781db627ce56b","src/sys/ptrace/bsd.rs":"8a7eacfc172b55763ae32109bf9b252669ba68b72cd5122f7504eb35c0c08345","src/sys/ptrace/linux.rs":"f09b45148004f4b28d8503c397a8d112d31046c98e68335bf4e89425d5b33f07","src/sys/ptrace/mod.rs":"671a6ccac955e75d5998f7e53ffc45ed4c7b6522a0f24a0937d60141f692dd39","src/sys/quota.rs":"7eb8e797466b506f6ed882f18eda92c4639cf43d9384a19bc39cd1bf982989c9","src/sys/reboot.rs":"fde9da27c2928f7026231430fa14fec2058df4e49a0aeda2a237a60524f11241","src/sys/select.rs":"57d6c4403d1bf788bd52ab6f03cfc16a189d31b6bfb338b135cb775fe369121f","src/sys/sendfile.rs":"ea386e83baf9b5b23488aca26635aacdc92f2bfe238e4399a7380bd0331e0ef7","src/sys/signal.rs":"9216cdd609b4dfb9c2e559c411be6b7c722f7ddd8024682c0895a32126b488aa","src/sys/signalfd.rs":"bfcfce619bf199e50f9cc80a3eb778d48474a015cfdafc64a0c3517373a225a9","src/sys/socket/addr.rs":"8b297ce13cd8ad200b3e764888c26ceb582ee505385d1e172440de94ade99644","src/sys/socket/mod.rs":"e0353f04f3d098a8bf5e2aae431645897b96e0889fb76537dc0330159c6f233d","src/sys/socket/sockopt.rs":"c663505d6a7a7ae9d76e03fbc17e53d308ea6b1eae92212812e1d76b2bf2916f","src/sys/stat.rs":"c4807048f86be67026756737cf81f448ec23c2a4745776cb40f40b533a88e0c8","src/sys/statfs.rs":"d2b72069f20aa7782ce5de4ec2d00c76a82a92376c2066bbb270cdac2167719e","src/sys/statvfs.rs":"2d328cf525ba04ab1e1351128624a7df7d0c55ea91fda6c8d620d13710d61606","src/sys/sysinfo.rs":"0c05244655aa9e6dff5138392c5c1ae97630d35bae0e5510d7f51a75c31fd425","src/sys/termios.rs":"a2e99afdfc3526641a2cb82b57bfd0a25a362fb9be5ad37ff9f11acaeb0b9439","src/sys/time.rs":"8a1224b9262026086af698630aedbed21b45d661fbd045fc6c6af41a16a23374","src/sys/uio.rs":"60a974275ff8c485ea183bdd6f7e25894e6f2360a5bfb25442391a825a3b9b8c","src/sys/utsname.rs":"c977a1aec6e051c72b27506395e942abab9cbd9523e6d345ea66dc10875ee87d","src/sys/wait.rs":"30b14a8f518d031805cae6c6ff644116f162d8c8a75fddcfce4479d8d55fd1c0","src/ucontext.rs":"075560ec08a362881534211f8c6b78844886d6b767c2f7067174600e38ed3f63","src/unistd.rs":"82308ec31b6293b55f86fafd04e976a41127fedebb8f158abd1399c7399af947","test/sys/mod.rs":"e0821cbc289ad952f17229609c7de4282cca1e44cd13e1a7494a6378ecbc12f8","test/sys/test_aio.rs":"b2544bfb321ca7fbed276ee637c769fb438156d14666cdc1e1d547b3514a44e3","test/sys/test_aio_drop.rs":"30dd1d238269d00381fa50f6d3cb2b13794b7cceb9f6455f3878fcbffa9aa62d","test/sys/test_epoll.rs":"35093d0cb1096a934dfc4f6efc737eadc4bdc2e2134d2a879061374a51b10c97","test/sys/test_inotify.rs":"a4f804bcf414b6635d9863c8534769a609009c451c3476cc839cdc30c439b3b1","test/sys/test_ioctl.rs":"eea690ed386da0a666df5eb23a417421fddb99dc8e39556f63b30969bb6cf779","test/sys/test_lio_listio_resubmit.rs":"203a583313542593148f375b087ae30620222a745680173fa98fc448d1e5ae7f","test/sys/test_pthread.rs":"3890e5ecbf2082e0d05d102cc9cec6e76ede3c15f250d104e3483b1c1c3400b1","test/sys/test_ptrace.rs":"4e8d5dff5fe6bc56e4ae53bdfd10f5e8ea567d8099576d1c690cf7a6b2bc955f","test/sys/test_select.rs":"bdb20211fc6ec1e3f186337eac51e08757acb6901d307d67c71bf9011f0d54bd","test/sys/test_signal.rs":"84ae63c2baa49eebeabe5bbd347b9c5417e14ba97f342719d753dc1c1c768d60","test/sys/test_signalfd.rs":"71b5d6d782283f6db64ca90f7fb06617faec71091d59d2587e41bbc9d8c43d5c","test/sys/test_socket.rs":"09a7ef0322e07b4579893e0307a7c4f81fbbc653d005b827a519c33a33e185ce","test/sys/test_sockopt.rs":"b3d386c8279f86bf9439c772317bafcdba5630fa806c8319e87ddac0ccfa3a03","test/sys/test_sysinfo.rs":"1e1bea9130fe38ccb07cd0ad7334c7be1e45efc33f7656a5973f8cad7126f225","test/sys/test_termios.rs":"fa4be3ade859b527bf33408f85a6f57b127917cf5f2afb662d09f6019d07913a","test/sys/test_uio.rs":"9da234e3bd5003fd200cc37c4a5be147ecda1a7670feb1d505f23d646d3e1c57","test/sys/test_wait.rs":"e6c5147e213daa93892cd828f53214995d2e019ff2372cc48d85ce9b93d26ec9","test/test.rs":"e6307f82a39426a949b8e925a2df4a62e31c0e43081d7a33d23759bdfeeece1f","test/test_dir.rs":"5d137a62f11d1a4993b4bb35dccc38a4c4416b7da374887f2335a9895b4fdee4","test/test_fcntl.rs":"730e64e99dc867ba5af7cc4ca83a4489c8b96b1a52f8937bcc666d673af27002","test/test_kmod/hello_mod/Makefile":"0219f7bce0603f97d997fb377ca071966c90333ecc665e78a54dfeb97a9c811b","test/test_kmod/hello_mod/hello.c":"bcac6b19c5bd807e1f3878c15e426acc85785a8ade9840c3bb4d068635c9188c","test/test_kmod/mod.rs":"f4754f028402a8ba788c87686288424cd3784e77c7eb5d96682ef491b1dd5262","test/test_mount.rs":"78ddc657f5098360c764fffa3a7d844503e4b6b65b44bfd42d9aa9045b415cb6","test/test_mq.rs":"5806f8825e91edc79dd0e2bc81d8be3ba094c2de6c0b2ac0268221ae2ad22701","test/test_net.rs":"ec6d580b87292519d514b0236bdd5abdd576fcf4835cfe49ed1ddb47c5f1aea3","test/test_nix_path.rs":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","test/test_poll.rs":"46c71ee988fe1b85561ea0530d099750be8c1b8f95ab6e845c8a9f46f16f060c","test/test_pty.rs":"be04f99904fa47b60400c2bd156a388b73df4b9aec2eebf13df7dcdfc9aacf45","test/test_ptymaster_drop.rs":"5cfbbb79551c205ab510c2d4ef497bf937ceac9151fbe2f2e543d6515e406990","test/test_sendfile.rs":"e0cbabbd34052ccaa03d6555d5631686aa076728f6378ee90f7ecec68f891144","test/test_stat.rs":"1dc420d3119bf4d863a7ae0ba63efa7f1416f6e46e4100ea161003fe1c3f66ba","test/test_unistd.rs":"0325c998acca1e826e9e2b3d351d55ab9723a6cb2ca2072245978e7f5a9acee8"},"package":"3b2e0b4f3320ed72aaedb9a5ac838690a8047c7b275da22711fddff4f8a14229"}
\ 文件尾没有换行符
+{"files":{}}
diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/third_party/rust/nix/src/sys/ioctl/linux.rs /home/loongson/thunderbird/third_party/rust/nix/src/sys/ioctl/linux.rs
--- /home/loongson/thunderbird-ori/thunderbird/third_party/rust/nix/src/sys/ioctl/linux.rs	2023-07-08 01:25:00.728189397 +0800
+++ b/b/b/b/third_party/rust/nix/src/sys/ioctl/linux.rs	2023-07-05 14:25:07.078771785 +0800
@@ -33,6 +33,7 @@ mod consts {
           target_arch = "arm",
           target_arch = "s390x",
           target_arch = "x86_64",
+          target_arch = "loongarch64",
           target_arch = "aarch64"))]
 mod consts {
     #[doc(hidden)]
     
diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/third_party/rust/authenticator/src/transport/linux/ioctl_loongarch64.rs /home/loongson/thunderbird/third_party/rust/authenticator/src/transport/linux/ioctl_loongarch64.rs
--- /home/loongson/thunderbird-ori/thunderbird/third_party/rust/authenticator/src/transport/linux/ioctl_loongarch64.rs	1970-01-01 08:00:00.000000000 +0800
+++ b/b/b/b/third_party/rust/authenticator/src/transport/linux/ioctl_loongarch64.rs	2023-07-05 12:38:39.009680157 +0800
@@ -0,0 +1,5 @@
+/* automatically generated by rust-bindgen */
+
+pub type __u32 = ::std::os::raw::c_uint;
+pub const _HIDIOCGRDESCSIZE: __u32 = 2147764225;
+pub const _HIDIOCGRDESC: __u32 = 2416199682;
diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/third_party/rust/authenticator/src/linux/hidwrapper.rs /home/loongson/thunderbird/third_party/rust/authenticator/src/linux/hidwrapper.rs
--- /home/loongson/thunderbird-ori/thunderbird/third_party/rust/authenticator/src/linux/hidwrapper.rs	2023-07-08 01:24:52.863971967 +0800
+++ b/b/b/b/third_party/rust/authenticator/src/linux/hidwrapper.rs	2023-07-05 14:15:33.009417318 +0800
@@ -46,3 +46,6 @@ include!("ioctl_aarch64be.rs");
 
 #[cfg(all(target_arch = "s390x", target_endian = "big"))]
 include!("ioctl_s390xbe.rs");
+
+#[cfg(all(target_arch = "loongarch64", target_endian = "little"))]
+include!("ioctl_loongarch64.rs");

diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/nsprpub/pr/include/md/_linux.cfg /home/loongson/thunderbird/nsprpub/pr/include/md/_linux.cfg
--- /home/loongson/thunderbird-ori/thunderbird/nsprpub/pr/include/md/_linux.cfg	2023-07-08 01:24:20.075031800 +0800
+++ b/b/b/b/nsprpub/pr/include/md/_linux.cfg	2023-07-05 20:29:51.716291696 +0800
@@ -1254,6 +1254,49 @@
 
 #define PR_BYTES_PER_WORD_LOG2  3
 #define PR_BYTES_PER_DWORD_LOG2 3
+#elif defined(__loongarch64)
+#define IS_LITTLE_ENDIAN 1
+#define IS_64
+
+#define PR_BYTES_PER_BYTE   1
+#define PR_BYTES_PER_SHORT  2
+#define PR_BYTES_PER_INT    4
+#define PR_BYTES_PER_INT64  8
+#define PR_BYTES_PER_LONG   8
+#define PR_BYTES_PER_FLOAT  4
+#define PR_BYTES_PER_DOUBLE 8
+#define PR_BYTES_PER_WORD   8
+#define PR_BYTES_PER_DWORD  8
+
+#define PR_BITS_PER_BYTE    8
+#define PR_BITS_PER_SHORT   16
+#define PR_BITS_PER_INT     32
+#define PR_BITS_PER_INT64   64
+#define PR_BITS_PER_LONG    64
+#define PR_BITS_PER_FLOAT   32
+#define PR_BITS_PER_DOUBLE  64
+#define PR_BITS_PER_WORD    64
+
+#define PR_BITS_PER_BYTE_LOG2   3
+#define PR_BITS_PER_SHORT_LOG2  4
+#define PR_BITS_PER_INT_LOG2    5
+#define PR_BITS_PER_INT64_LOG2  6
+#define PR_BITS_PER_LONG_LOG2   6
+#define PR_BITS_PER_FLOAT_LOG2  5
+#define PR_BITS_PER_DOUBLE_LOG2 6
+#define PR_BITS_PER_WORD_LOG2   6
+
+#define PR_ALIGN_OF_SHORT   2
+#define PR_ALIGN_OF_INT     4
+#define PR_ALIGN_OF_LONG    8
+#define PR_ALIGN_OF_INT64   8
+#define PR_ALIGN_OF_FLOAT   4
+#define PR_ALIGN_OF_DOUBLE  8
+#define PR_ALIGN_OF_POINTER 8
+#define PR_ALIGN_OF_WORD    8
+
+#define PR_BYTES_PER_WORD_LOG2  3
+#define PR_BYTES_PER_DWORD_LOG2 3
 
 #else
 
diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/nsprpub/pr/include/md/_linux.h /home/loongson/thunderbird/nsprpub/pr/include/md/_linux.h
--- /home/loongson/thunderbird-ori/thunderbird/nsprpub/pr/include/md/_linux.h	2023-07-08 01:24:20.075031800 +0800
+++ b/b/b/b/nsprpub/pr/include/md/_linux.h	2023-07-05 20:32:31.335703270 +0800
@@ -61,6 +61,10 @@
 #define _PR_SI_ARCHITECTURE "riscv32"
 #elif defined(__riscv) && (__riscv_xlen == 64)
 #define _PR_SI_ARCHITECTURE "riscv64"
+
+#elif defined(__loongarch64) 
+#define _PR_SI_ARCHITECTURE "loongarch64"
+
 #elif defined(__e2k__)
 #define _PR_SI_ARCHITECTURE "e2k"
 #elif defined(__arc__)
 
diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/nsprpub/config/nsinstall.c /home/loongson/thunderbird/nsprpub/config/nsinstall.c
--- /home/loongson/thunderbird-ori/thunderbird/nsprpub/config/nsinstall.c	2023-07-08 01:24:20.063031446 +0800
+++ b/b/b/b/nsprpub/config/nsinstall.c	2023-07-05 20:00:57.060343725 +0800
@@ -40,6 +40,31 @@
 #endif
 
 #if defined(LINUX) || defined(__GNU__) || defined(__GLIBC__)
+#ifdef NEXTSTEP
+#include <bsd/libc.h>
+
+/*
+** balazs.pataki@sztaki.hu: The getcwd is broken in NEXTSTEP (returns 0),
+** when called on a mounted fs. Did anyone notice this? Here's an ugly
+** workaround ...
+*/
+#define getcwd(b,s)   my_getcwd(b,s)
+
+static char *
+my_getcwd (char *buf, size_t size)
+{
+    FILE *pwd = popen("pwd", "r");
+    char *result = fgets(buf, size, pwd);
+
+    if (result) {
+        buf[strlen(buf)-1] = '\0';
+    }
+    pclose (pwd);
+    return buf;
+}
+#endif /* NEXTSTEP */
+
+#if defined(LINUX) || defined(__GLIBC__) || defined(__GNU__)
 #include <getopt.h>
 #endif
 
diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/ipc/chromium/src/build/build_config.h /home/loongson/thunderbird/ipc/chromium/src/build/build_config.h
--- /home/loongson/thunderbird-ori/thunderbird/ipc/chromium/src/build/build_config.h	2023-07-08 01:23:58.738389686 +0800
+++ b/b/b/b/ipc/chromium/src/build/build_config.h	2023-07-05 22:16:47.545704345 +0800
@@ -100,6 +100,9 @@
 #elif defined(__mips__)
 #  define ARCH_CPU_MIPS 1
 #  define ARCH_CPU_32_BITS 1
+#elif defined(__loongarch64)
+#  define ARCH_CPU_LOONGARCH 1
+#  define ARCH_CPU_64_BITS 1
 #elif defined(__hppa__)
 #  define ARCH_CPU_HPPA 1
 #  define ARCH_CPU_32_BITS 1
 
diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/third_party/libwebrtc/build/build_config.h /home/loongson/thunderbird/third_party/libwebrtc/build/build_config.h
--- /home/loongson/thunderbird-ori/thunderbird/third_party/libwebrtc/build/build_config.h	2023-07-08 01:24:50.839915511 +0800
+++ b/b/b/b/third_party/libwebrtc/build/build_config.h	2023-07-05 23:54:19.110404053 +0800
@@ -131,6 +131,10 @@
 #define ARCH_CPU_X86_64 1
 #define ARCH_CPU_64_BITS 1
 #define ARCH_CPU_LITTLE_ENDIAN 1
+#elif defined(__loongarch64)
+#define ARCH_CPU_LOONGARCH_FAMILY 1
+#define ARCH_CPU_LOONGARCH 1
+#define ARCH_CPU_64_BITS 1
 #elif defined(_M_IX86) || defined(__i386__)
 #define ARCH_CPU_X86_FAMILY 1
 #define ARCH_CPU_X86 1
 
diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/js/src/wasm/WasmSignalHandlers.cpp /home/loongson/thunderbird/js/src/wasm/WasmSignalHandlers.cpp
--- /home/loongson/thunderbird-ori/thunderbird/js/src/wasm/WasmSignalHandlers.cpp	2023-07-08 01:24:10.738753850 +0800
+++ b/b/b/b/js/src/wasm/WasmSignalHandlers.cpp	2023-07-07 21:07:48.830131758 +0800
@@ -111,8 +111,8 @@ using mozilla::DebugOnly;
 #      define R01_sig(p) ((p)->sc_frame.fixreg[1])
 #      define R32_sig(p) ((p)->sc_frame.srr0)
 #    endif
-#  elif defined(__linux__) || defined(__sun)
-#    if defined(__linux__)
+#  elif defined(__linux__) || defined(__sun) || defined(__GNU__)
+#    if defined(__linux__) || defined(__GNU__)
 #      define EIP_sig(p) ((p)->uc_mcontext.gregs[REG_EIP])
 #      define EBP_sig(p) ((p)->uc_mcontext.gregs[REG_EBP])
 #      define ESP_sig(p) ((p)->uc_mcontext.gregs[REG_ESP])
@@ -157,7 +157,7 @@ using mozilla::DebugOnly;
 #      define R01_sig(p) ((p)->uc_mcontext.gp_regs[1])
 #      define R32_sig(p) ((p)->uc_mcontext.gp_regs[32])
 #    endif
-#    if defined(__linux__) && defined(__loongarch__)
+#    if defined(__linux__) && defined(__loongarch64__)
 #      define EPC_sig(p) ((p)->uc_mcontext.pc)
 #      define RRA_sig(p) ((p)->uc_mcontext.gregs[1])
 #      define RSP_sig(p) ((p)->uc_mcontext.gregs[3])
@@ -400,7 +400,7 @@ struct macos_aarch64_context {
 #    define PC_sig(p) R32_sig(p)
 #    define SP_sig(p) R01_sig(p)
 #    define FP_sig(p) R01_sig(p)
-#  elif defined(__loongarch__)
+#  elif defined(__loongarch64__)
 #    define PC_sig(p) EPC_sig(p)
 #    define FP_sig(p) RFP_sig(p)
 #    define SP_sig(p) RSP_sig(p)
@@ -440,7 +440,7 @@ static uint8_t* ContextToSP(CONTEXT* con
 }
 
 #  if defined(__arm__) || defined(__aarch64__) || defined(__mips__) || \
-      defined(__loongarch__)
+      defined(__loongarch64__)
 static uint8_t* ContextToLR(CONTEXT* context) {
 #    ifdef LR_sig
   return reinterpret_cast<uint8_t*>(LR_sig(context));
@@ -457,7 +457,7 @@ static JS::ProfilingFrameIterator::Regis
   state.pc = ContextToPC(context);
   state.sp = ContextToSP(context);
 #  if defined(__arm__) || defined(__aarch64__) || defined(__mips__) || \
-      defined(__loongarch__)
+      defined(__loongarch64__)
   state.lr = ContextToLR(context);
 #  else
   state.lr = (void*)UINTPTR_MAX;
@@ -727,7 +727,7 @@ static void MachExceptionHandlerThread()
 
 #  else  // If not Windows or Mac, assume Unix
 
-#    if defined(__mips__) || defined(__loongarch__)
+#    if defined(__mips__) || defined(__loongarch64__)
 static const uint32_t kWasmTrapSignal = SIGFPE;
 #    else
 static const uint32_t kWasmTrapSignal = SIGILL;
 
diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/security/nss/coreconf/config.gypi /home/loongson/thunderbird/security/nss/coreconf/config.gypi
--- /home/loongson/thunderbird-ori/thunderbird/security/nss/coreconf/config.gypi	2023-07-08 01:24:23.663137385 +0800
+++ b/b/b/b/security/nss/coreconf/config.gypi	2023-07-07 22:59:43.975849347 +0800
@@ -211,7 +211,7 @@
           },
         },
       }],
-      [ 'target_arch=="arm64" or target_arch=="aarch64" or target_arch=="sparc64" or target_arch=="ppc64" or target_arch=="ppc64le" or target_arch=="s390x" or target_arch=="mips64" or target_arch=="e2k" or target_arch=="riscv64"', {
+      [ 'target_arch=="arm64" or target_arch=="aarch64" or target_arch=="sparc64" or target_arch=="ppc64" or target_arch=="ppc64le" or target_arch=="s390x" or target_arch=="mips64" or target_arch=="e2k" or target_arch=="riscv64" or target_arch=="loongarch64"', {
         'defines': [
           'NSS_USE_64',
         ],


diff --git a/a/a/a/js/xpconnect/src/XPCJSContext.cpp b/b/b/b/js/xpconnect/src/XPCJSContext.cpp
--- a/a/a/a/js/xpconnect/src/XPCJSContext.cpp
+++ b/b/b/b/js/xpconnect/src/XPCJSContext.cpp
@@ -933,7 +933,8 @@ static void LoadStartupJSPrefs(XPCJSCont
       StaticPrefs::javascript_options_jit_full_debug_checks_DoNotUseDirectly());
 #endif
 
-#if !defined(JS_CODEGEN_MIPS32) && !defined(JS_CODEGEN_MIPS64)
+#if !defined(JS_CODEGEN_MIPS32) && !defined(JS_CODEGEN_MIPS64) && \
+    !defined(JS_CODEGEN_LOONG64)
   JS_SetGlobalJitCompilerOption(
       cx, JSJITCOMPILER_SPECTRE_INDEX_MASKING,
       StaticPrefs::javascript_options_spectre_index_masking_DoNotUseDirectly());
diff --git a/a/a/a/modules/libpref/init/StaticPrefList.yaml b/b/b/b/modules/libpref/init/StaticPrefList.yaml
--- a/a/a/a/modules/libpref/init/StaticPrefList.yaml
+++ b/b/b/b/modules/libpref/init/StaticPrefList.yaml
@@ -7102,10 +7102,10 @@
   mirror: always  # LoadStartupJSPrefs
   do_not_use_directly: true
 
-#if !defined(JS_CODEGEN_MIPS32) && !defined(JS_CODEGEN_MIPS64)
+#if !defined(JS_CODEGEN_MIPS32) && !defined(JS_CODEGEN_MIPS64) && !defined(JS_CODEGEN_LOONG64)
   # Spectre security vulnerability mitigations for the JS JITs.
   #
-  # NOTE: The MIPS backends do not support these mitigations (and generally
+  # NOTE: The MIPS and LoongArch backends do not support these mitigations (and generally
   #       do not need them). In that case, leave the pref unlisted with its
   #       default value of false.
 -   name: javascript.options.spectre.index_masking
@@ -7137,7 +7137,7 @@
     value: true
     mirror: always  # LoadStartupJSPrefs
     do_not_use_directly: true
-#endif  // !defined(JS_CODEGEN_MIPSXX)
+#endif  // !defined(JS_CODEGEN_MIPSXX) && !defined(JS_CODEGEN_LOONG64)
 
 # Separate pref to override the values of the Spectre-related prefs above for
 # isolated web content processes, where we don't need these mitigations.



diff -r b1b50f07c34b xpcom/reflect/xptcall/md/unix/moz.build
--- a/a/a/a/xpcom/reflect/xptcall/md/unix/moz.build	Thu Apr 06 05:27:08 2023 +0000
+++ b/b/b/b/xpcom/reflect/xptcall/md/unix/moz.build	Tue Apr 11 19:38:08 2023 +0800
@@ -271,6 +271,14 @@
         "xptcstubs_riscv64.cpp",
     ]
 
+if CONFIG["OS_ARCH"] == "Linux" and CONFIG["CPU_ARCH"] == "loongarch64":
+    SOURCES += [
+        "xptcinvoke_asm_loongarch64.S",
+        "xptcinvoke_loongarch64.cpp",
+        "xptcstubs_asm_loongarch64.S",
+        "xptcstubs_loongarch64.cpp",
+    ]
+
 FINAL_LIBRARY = "xul"
 
 LOCAL_INCLUDES += [
diff -r b1b50f07c34b xpcom/reflect/xptcall/md/unix/xptcinvoke_asm_loongarch64.S
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/b/b/b/xpcom/reflect/xptcall/md/unix/xptcinvoke_asm_loongarch64.S	Tue Apr 11 19:38:08 2023 +0800
@@ -0,0 +1,92 @@
+/* This Source Code Form subject to the terms of Mozilla Public
+ * License, v. 2.0 If a copy of the MPL was not distributed with
+ * this file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+  .set NGPREGS, 8
+  .set NFPREGS, 8
+
+  .text
+  .globl  _NS_InvokeByIndex
+  .type   _NS_InvokeByIndex, @function
+/*
+ * _NS_InvokeByIndex(nsISupports* that, uint32_t methodIndex,
+ *                   uint32_t paramCount, nsXPTCVariant* params)
+ */
+_NS_InvokeByIndex:
+  .cfi_startproc
+  addi.d    $sp, $sp, -32
+  .cfi_def_cfa_offset 32
+  st.d      $s0, $sp, 16
+  .cfi_offset 23, -16
+  st.d      $s1, $sp, 8
+  .cfi_offset 24, -24
+  st.d      $s2, $sp, 0
+  .cfi_offset 25, -32
+  st.d      $ra, $sp, 24
+  .cfi_offset 1, -8
+  
+  move      $s2, $a0
+  move      $s1, $a1
+  move      $s0, $sp
+  .cfi_def_cfa_register 23
+
+  /* 16-bytes alignment */
+  addi.d    $a0, $a2, 1
+  li.d      $t4, 0xfffffffffffffffe
+  and       $a0, $a0, $t4
+  slli.d    $a0, $a0, 3
+  sub.d     $sp, $sp, $a0
+  move      $a4, $sp
+
+  addi.d    $sp, $sp, -8*(NFPREGS+NGPREGS)
+  move      $a0, $sp
+  addi.d    $a1, $sp, 8*NGPREGS
+
+  bl        invoke_copy_to_stack
+
+  /* 1st argument is this */
+  move      $a0, $s2
+
+  ld.d      $a1, $sp, 8
+  ld.d      $a2, $sp, 16
+  ld.d      $a3, $sp, 24
+  ld.d      $a4, $sp, 32
+  ld.d      $a5, $sp, 40
+  ld.d      $a6, $sp, 48
+  ld.d      $a7, $sp, 56
+
+  fld.d     $fa0, $sp, 64
+  fld.d     $fa1, $sp, 72
+  fld.d     $fa2, $sp, 80
+  fld.d     $fa3, $sp, 88
+  fld.d     $fa4, $sp, 96
+  fld.d     $fa5, $sp, 104
+  fld.d     $fa6, $sp, 112
+  fld.d     $fa7, $sp, 120
+
+  addi.d    $sp, $sp, 8*(NGPREGS+NFPREGS)
+
+  ld.d      $s2, $s2, 0
+  slli.w    $s1, $s1, 3
+  add.d     $s2, $s2, $s1
+  ld.d      $t3, $s2, 0
+  jirl      $ra, $t3, 0
+
+  move      $sp, $s0
+  .cfi_def_cfa_register 3
+  ld.d      $s0, $sp, 16
+  .cfi_restore 23
+  ld.d      $s1, $sp, 8
+  .cfi_restore 24
+  ld.d      $s2, $sp, 0
+  .cfi_restore 25
+  ld.d      $ra, $sp, 24
+  .cfi_restore 1
+  addi.d    $sp, $sp, 32
+  .cfi_def_cfa_offset -32
+  jirl      $zero, $ra, 0
+  .cfi_endproc
+  .size   _NS_InvokeByIndex, .-_NS_InvokeByIndex
+  .section .note.GNU-stack, "", @progbits
+
diff -r b1b50f07c34b xpcom/reflect/xptcall/md/unix/xptcinvoke_loongarch64.cpp
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/b/b/b/xpcom/reflect/xptcall/md/unix/xptcinvoke_loongarch64.cpp	Tue Apr 11 19:38:08 2023 +0800
@@ -0,0 +1,100 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+// Platform specific code to invoke XPCOM methods on native objects
+
+#include "xptcprivate.h"
+
+extern "C" void invoke_copy_to_stack(uint64_t* gpregs, double* fpregs,
+                                     uint32_t paramCount, nsXPTCVariant* s,
+                                     uint64_t* d) {
+  static const uint32_t GPR_COUNT = 8;
+  static const uint32_t FPR_COUNT = 8;
+
+  uint32_t nr_gpr = 1;  // skip one GPR register for "this"
+  uint32_t nr_fpr = 0;
+  uint64_t value = 0;
+
+  for (uint32_t i = 0; i < paramCount; i++, s++) {
+    if (s->IsIndirect()) {
+      value = (uint64_t)&s->val;
+    } else {
+      switch (s->type) {
+        case nsXPTType::T_FLOAT:
+          break;
+        case nsXPTType::T_DOUBLE:
+          break;
+        case nsXPTType::T_I8:
+          value = s->val.i8;
+          break;
+        case nsXPTType::T_I16:
+          value = s->val.i16;
+          break;
+        case nsXPTType::T_I32:
+          value = s->val.i32;
+          break;
+        case nsXPTType::T_I64:
+          value = s->val.i64;
+          break;
+        case nsXPTType::T_U8:
+          value = s->val.u8;
+          break;
+        case nsXPTType::T_U16:
+          value = s->val.u16;
+          break;
+        case nsXPTType::T_U32:
+          value = s->val.u32;
+          break;
+        case nsXPTType::T_U64:
+          value = s->val.u64;
+          break;
+        case nsXPTType::T_BOOL:
+          value = s->val.b;
+          break;
+        case nsXPTType::T_CHAR:
+          value = s->val.c;
+          break;
+        case nsXPTType::T_WCHAR:
+          value = s->val.wc;
+          break;
+        default:
+          value = (uint64_t)s->val.p;
+          break;
+      }
+    }
+    
+    if (!s->IsIndirect() && s->type == nsXPTType::T_DOUBLE) {
+      if (nr_fpr < FPR_COUNT) {
+        fpregs[nr_fpr++] = s->val.d;
+      } else if (nr_gpr < GPR_COUNT) {
+        memcpy(&gpregs[nr_gpr++], &(s->val.d), sizeof(s->val.d));
+      } else {
+        memcpy(d++, &(s->val.d), sizeof(s->val.d));
+      }
+    } else if (!s->IsIndirect() && s->type == nsXPTType::T_FLOAT) {
+      if (nr_fpr < FPR_COUNT) {
+        memcpy(&fpregs[nr_fpr++], &(s->val.f), sizeof(s->val.f));
+      } else if (nr_gpr < GPR_COUNT) {
+        memcpy(&gpregs[nr_gpr++], &(s->val.f), sizeof(s->val.f));
+      } else {
+        memcpy(d++, &(s->val.f), sizeof(s->val.f));
+      }
+    } else {
+      if (nr_gpr < GPR_COUNT) {
+        gpregs[nr_gpr++] = value;
+      } else {
+        *d++ = value;
+      }
+    }
+  }
+}
+
+extern "C" nsresult _NS_InvokeByIndex(nsISupports* that, uint32_t methodIndex,
+                                      uint32_t paramCount,
+                                      nsXPTCVariant* params);
+EXPORT_XPCOM_API(nsresult)
+NS_InvokeByIndex(nsISupports* that, uint32_t methodIndex, uint32_t paramCount,
+                 nsXPTCVariant* params) {
+  return _NS_InvokeByIndex(that, methodIndex, paramCount, params);
+}
diff -r b1b50f07c34b xpcom/reflect/xptcall/md/unix/xptcstubs_asm_loongarch64.S
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/b/b/b/xpcom/reflect/xptcall/md/unix/xptcstubs_asm_loongarch64.S	Tue Apr 11 19:38:08 2023 +0800
@@ -0,0 +1,52 @@
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+    .set NGPRGES, 8
+    .set NFPREGS, 8
+
+    .text
+    .globl SharedStub
+    .hidden SharedStub
+    .type  SharedStub,@function
+
+SharedStub:
+    .cfi_startproc
+    move      $t0, $sp
+    addi.d    $sp, $sp, -8*(NGPRGES+NFPREGS)-16
+    .cfi_def_cfa_offset 8*(NGPRGES+NFPREGS)+16
+    st.d      $a0, $sp, 0
+    st.d      $a1, $sp, 8
+    st.d      $a2, $sp, 16
+    st.d      $a3, $sp, 24
+    st.d      $a4, $sp, 32
+    st.d      $a5, $sp, 40
+    st.d      $a6, $sp, 48
+    st.d      $a7, $sp, 56
+    fst.d     $fa0, $sp, 64
+    fst.d     $fa1, $sp, 72
+    fst.d     $fa2, $sp, 80
+    fst.d     $fa3, $sp, 88
+    fst.d     $fa4, $sp, 96
+    fst.d     $fa5, $sp, 104
+    fst.d     $fa6, $sp, 112
+    fst.d     $fa7, $sp, 120
+    st.d      $ra, $sp, 136
+    .cfi_offset 1, 136
+
+    /* methodIndex is passed from stub */
+    move      $a1, $t6
+    move      $a2, $t0
+    move      $a3, $sp
+    addi.d    $a4, $sp, 8*NGPRGES
+
+    bl        PrepareAndDispatch
+
+    ld.d      $ra, $sp, 136
+    .cfi_restore 1
+    addi.d    $sp, $sp, 8*(NGPRGES+NFPREGS)+16
+    .cfi_def_cfa_offset -8*(NGPRGES+NFPREGS)-16
+    jirl      $zero, $ra, 0
+    .cfi_endproc
+
+    .size SharedStub, .-SharedStub
+    .section .note.GNU-stack, "", @progbits
diff -r b1b50f07c34b xpcom/reflect/xptcall/md/unix/xptcstubs_loongarch64.cpp
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/b/b/b/xpcom/reflect/xptcall/md/unix/xptcstubs_loongarch64.cpp	Tue Apr 11 19:38:08 2023 +0800
@@ -0,0 +1,159 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, V. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "xptcprivate.h"
+
+extern "C" nsresult ATTRIBUTE_USED PrepareAndDispatch(nsXPTCStubBase* self,
+                                                      uint32_t methodIndex,
+                                                      uint64_t* args,
+                                                      uint64_t* gpregs,
+                                                      double* fpregs) {
+  static const uint32_t GPR_COUNT = 8;
+  static const uint32_t FPR_COUNT = 8;
+  nsXPTCMiniVariant paramBuffer[PARAM_BUFFER_COUNT];
+  const nsXPTMethodInfo* info;
+
+  self->mEntry->GetMethodInfo(uint16_t(methodIndex), &info);
+
+  uint32_t paramCount = info->GetParamCount();
+  const uint8_t indexOfJSContext = info->IndexOfJSContext();
+
+  uint64_t* ap = args;
+  uint32_t nr_gpr = 1;    // skip the arg which is 'self'
+  uint32_t nr_fpr = 0;
+  uint64_t value;
+
+  for (uint32_t i = 0; i < paramCount; i++) {
+    const nsXPTParamInfo& param = info->GetParam(i);
+    const nsXPTType& type = param.GetType();
+    nsXPTCMiniVariant* dp = &paramBuffer[i];
+
+    if (i == indexOfJSContext) {
+      if (nr_gpr < GPR_COUNT)
+        nr_gpr++;
+      else
+        ap++;
+    }
+
+    if (!param.IsOut() && type == nsXPTType::T_DOUBLE) {
+      if (nr_fpr < FPR_COUNT) {
+        dp->val.d = fpregs[nr_fpr++];
+      } else if (nr_gpr < GPR_COUNT) {
+        memcpy(&dp->val.d, &gpregs[nr_gpr++], sizeof(dp->val.d));
+      } else {
+        memcpy(&dp->val.d, ap++, sizeof(dp->val.d));
+      }
+      continue;
+    }
+    
+    if (!param.IsOut() && type == nsXPTType::T_FLOAT) {
+      if (nr_fpr < FPR_COUNT) {
+        memcpy(&dp->val.f, &fpregs[nr_fpr++], sizeof(dp->val.f));
+      } else if (nr_gpr < GPR_COUNT) {
+        memcpy(&dp->val.f, &gpregs[nr_gpr++], sizeof(dp->val.f));
+      } else {
+        memcpy(&dp->val.f, ap++, sizeof(dp->val.f));
+      }
+      continue;
+    }
+
+    if (nr_gpr < GPR_COUNT) {
+      value = gpregs[nr_gpr++];
+    } else {
+      value = *ap++;
+    }
+
+    if (param.IsOut() || !type.IsArithmetic()) {
+      dp->val.p = (void*)value;
+      continue;
+    }
+
+    switch (type) {
+      case nsXPTType::T_I8:
+        dp->val.i8 = (int8_t)value;
+        break;
+      case nsXPTType::T_I16:
+        dp->val.i16 = (int16_t)value;
+        break;
+      case nsXPTType::T_I32:
+        dp->val.i32 = (int32_t)value;
+        break;
+      case nsXPTType::T_I64:
+        dp->val.i64 = (int64_t)value;
+        break;
+      case nsXPTType::T_U8:
+        dp->val.u8 = (uint8_t)value;
+        break;
+      case nsXPTType::T_U16:
+        dp->val.u16 = (uint16_t)value;
+        break;
+      case nsXPTType::T_U32:
+        dp->val.u32 = (uint32_t)value;
+        break;
+      case nsXPTType::T_U64:
+        dp->val.u64 = (uint64_t)value;
+        break;
+      case nsXPTType::T_BOOL:
+        dp->val.b = (bool)(uint8_t)value;
+        break;
+      case nsXPTType::T_CHAR:
+        dp->val.c = (char)value;
+        break;
+      case nsXPTType::T_WCHAR:
+        dp->val.wc = (wchar_t)value;
+        break;
+      default:
+        NS_ERROR("bad type");
+        break;
+    }
+  }
+
+  nsresult result = self->mOuter->CallMethod((uint16_t)methodIndex, info,
+                                             paramBuffer);
+  return result;
+}
+
+// Load $t6 with the constant 'n' and branch to SharedStub().
+// clang-format off
+#define STUB_ENTRY(n)                                                 \
+  __asm__(                                                            \
+      ".text\n\t"                                                     \
+      ".if "#n" < 10 \n\t"                                            \
+      ".globl  _ZN14nsXPTCStubBase5Stub"#n"Ev \n\t"                   \
+      ".hidden _ZN14nsXPTCStubBase5Stub"#n"Ev \n\t"                   \
+      ".type   _ZN14nsXPTCStubBase5Stub"#n"Ev,@function \n\n"         \
+      "_ZN14nsXPTCStubBase5Stub"#n"Ev: \n\t"                          \
+      ".elseif "#n" < 100 \n\t"                                       \
+      ".globl  _ZN14nsXPTCStubBase6Stub"#n"Ev \n\t"                   \
+      ".hidden _ZN14nsXPTCStubBase6Stub"#n"Ev \n\t"                   \
+      ".type   _ZN14nsXPTCStubBase6Stub"#n"Ev,@function \n\n"         \
+      "_ZN14nsXPTCStubBase6Stub"#n"Ev: \n\t"                          \
+      ".elseif "#n" < 1000 \n\t"                                      \
+      ".globl  _ZN14nsXPTCStubBase7Stub"#n"Ev \n\t"                   \
+      ".hidden _ZN14nsXPTCStubBase7Stub"#n"Ev \n\t"                   \
+      ".type   _ZN14nsXPTCStubBase7Stub"#n"Ev,@function \n\n"         \
+      "_ZN14nsXPTCStubBase7Stub"#n"Ev: \n\t"                          \
+      ".else  \n\t"                                                   \
+      ".err   \"stub number "#n" >= 1000 not yet supported\"\n"       \
+      ".endif \n\t"                                                   \
+      "li.d   $t6, "#n" \n\t"                                         \
+      "b      SharedStub \n"                                          \
+      ".if "#n" < 10 \n\t"                                            \
+      ".size   _ZN14nsXPTCStubBase5Stub"#n"Ev,.-_ZN14nsXPTCStubBase5Stub"#n"Ev\n\t" \
+      ".elseif "#n" < 100 \n\t"                                                     \
+      ".size   _ZN14nsXPTCStubBase6Stub"#n"Ev,.-_ZN14nsXPTCStubBase6Stub"#n"Ev\n\t" \
+      ".else \n\t"                                                                  \
+      ".size   _ZN14nsXPTCStubBase7Stub"#n"Ev,.-_ZN14nsXPTCStubBase7Stub"#n"Ev\n\t" \
+      ".endif"                                                                      \
+);
+// clang-format on
+
+#define SENTINEL_ENTRY(n)                         \
+  nsresult nsXPTCStubBase::Sentinel##n() {        \
+    NS_ERROR("nsXPTCStubBase::Sentinel called");  \
+    return NS_ERROR_NOT_IMPLEMENTED;              \
+  }
+
+#include "xptcstubsdef.inc"
diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/python/mozboot/mozboot/bootstrap.py /home/loongson/thunderbird/python/mozboot/mozboot/bootstrap.py
--- a/a/a/a/python/mozboot/mozboot/bootstrap.py	2023-07-08 01:24:20.367040414 +0800
+++ b/b/b/b/python/mozboot/mozboot/bootstrap.py	2023-07-04 13:51:55.279371226 +0800
@@ -106,6 +106,7 @@ DEBIAN_DISTROS = (
     "devuan",
     "pureos",
     "deepin",
+    "loongnix"
 )
 
 ADD_GIT_CINNABAR_PATH = """
--- a/a/a/a/js/moz.configure       2023-06-04 11:08:39.000000000 +0800
+++ b/b/b/b/js/moz.configure        2023-07-07 00:50:27.329340407 +0800
@@ -234,7 +234,8 @@ def jit_codegen(jit_enabled, simulator,
         return namespace(arm64=True)
     elif target.cpu == "x86_64":
         return namespace(x64=True)
-
+    elif target.cpu == "loongarch64":
+        return namespace(loong64=True)
     return namespace(**{str(target.cpu): True})

--- a/a/a/a/build/RunCbindgen.py   2023-06-04 11:08:36.000000000 +0800
+++ b/b/b/b/build/RunCbindgen.py    2023-07-09 00:49:17.362043062 +0800
@@ -45,7 +45,7 @@ def generate_metadata(output, cargo_conf
         [
             buildconfig.substs["CARGO"],
             "metadata",
-            "--frozen",
+            "--offline",
             "--all-features",
             "--format-version",
             "1",

diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/third_party/rust/cty/.cargo-checksum.json /home/loongson/thunderbird/third_party/rust/cty/.cargo-checksum.json
--- a/a/a/a/third_party/rust/cty/.cargo-checksum.json	2023-07-08 01:24:53.199981319 +0800
+++ b/b/b/b/third_party/rust/cty/.cargo-checksum.json	2023-07-05 01:13:25.247318293 +0800
@@ -1 +1 @@
-{"files":{"CHANGELOG.md":"077c738b5f2c05d66a12209edaabca887091db727d61164a7a414da23d8bf08f","Cargo.toml":"94a517ea6c7dad4634a9a2bd356f3a8035927e7ff8367bd5a975b4db4ccf8e6e","LICENSE-APACHE":"a60eea817514531668d7e00765731449fe14d059d3249e0bc93b36de45f759f2","LICENSE-MIT":"035e70219855119df4273b3c5b97543ae82e0dd60c520416e759107c602f651b","README.md":"19687c50697e6abc991e4c35e6d674db56bd5e5ae0d5b833440718f8f154a74d","ci/install.sh":"9b34273d9e79ec59f63d5e3e7aea27b0db66194667f9730a21158740fa1b99f1","ci/script.sh":"54962430ca4d3528e5c0d44ff590b1504be13147db5cbe8bb82f1358528ef5f3","src/lib.rs":"33a38ce6df718fb0191f34ff2cefdcbd3ad9d93f0c4073b78eaf937c07fb7614"},"package":"b365fabc795046672053e29c954733ec3b05e4be654ab130fe8f1f94d7051f35"}
\ 文件尾没有换行符
+{"files":{}}
diff -uprN -x .git /home/loongson/thunderbird-ori/thunderbird/third_party/rust/authenticator/src/linux/ioctl_loongarch64.rs /home/loongson/thunderbird/third_party/rust/authenticator/src/linux/ioctl_loongarch64.rs
--- a/a/a/a/third_party/rust/authenticator/src/linux/ioctl_loongarch64.rs	1970-01-01 08:00:00.000000000 +0800
+++ b/b/b/b/third_party/rust/authenticator/src/linux/ioctl_loongarch64.rs	2023-07-05 14:20:53.945965252 +0800
@@ -0,0 +1,5 @@
+/* automatically generated by rust-bindgen */
+
+pub type __u32 = ::std::os::raw::c_uint;
+pub const _HIDIOCGRDESCSIZE: __u32 = 2147764225;
+pub const _HIDIOCGRDESC: __u32 = 2416199682;

--- /dev/null   2023-07-08 00:47:46.936000000 +0800
+++ b/b/b/b/mozconfig   2023-07-09 16:34:11.163275651 +0800
@@ -0,0 +1,23 @@
+ac_add_options --prefix=/usr
+ac_add_options --libdir=/usr/lib64
+ac_add_options --target=loongarch64-unknown-linux-gnu
+ac_add_options --enable-application=comm/mail
+ac_add_options --disable-crashreporter
+ac_add_options --disable-updater
+ac_add_options --disable-debug
+ac_add_options --disable-debug-symbols
+ac_add_options --enable-optimize=-O2
+ac_add_options --enable-official-branding
+ac_add_options --enable-system-ffi
+ac_add_options --enable-system-pixman
+ac_add_options --with-system-png
+ac_add_options --with-system-zlib
+ac_add_options --disable-strip
+ac_add_options --disable-jemalloc
+ac_add_options --disable-install-strip
+ac_add_options --enable-fmp4
+ac_add_options --without-wasm-sandboxed-libraries
+
+unset MOZ_TELEMETRY_REPORTING
+mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/thunderbird-build-dir
+mk_add_options MOZ_PARALLEL_BUILD=4
